#Import DESeq2 library in R
library("DESeq2")
library( "DESeq2" )
library(dplyr)
data <- read.csv("merged.csv", header = TRUE)
data <- read.csv("merged490.csv", header = TRUE)
View(data)
data <- data %>% mutate_if(is.double, as.integer)
write.csv(data, "converted_integers.csv")
countData <- as.matrix(read.csv("converted_integers.csv", row.names="X"))
colnames(countData) <- gsub(pattern = ".means", replacement = "", x = colnames(countData))
head(countData)
columnremoved <- countData[,-1]
write.csv(columnremoved, "counts.csv")
CountData <- as.matrix(read.csv("counts.csv", row.names="X"))
colData <- read.csv("meta_file.csv", sep=",", row.names=1)
all(rownames(colData) %in% colnames(CountData))
CountData <- CountData[, rownames(colData)]
CountData <- CountData[, rownames(colData)]
View(colData)
View(data)
all(rownames(colData) %in% colnames(CountData))
CountData <- CountData[, rownames(colData)]
colData <- read.csv("meta_file.csv", row.names=1)
View(colData)
colData <- read.csv("meta_file.csv", row.names=1)
all(rownames(colData) %in% colnames(CountData))
CountData <- CountData[, rownames(colData)]
View(colData)
#Import DESeq2 library in R
library("DESeq2")
library( "DESeq2" )
library(dplyr)
data <- read.csv("merged490.csv", header = TRUE)
View(data)
data <- data %>% mutate_if(is.double, as.integer)
write.csv(data, "converted_integers.csv")
countData <- as.matrix(read.csv("converted_integers.csv", row.names="X"))
colnames(countData) <- gsub(pattern = ".means", replacement = "", x = colnames(countData))
head(countData)
columnremoved <- countData[,-1]
write.csv(columnremoved, "counts.csv")
CountData <- as.matrix(read.csv("counts.csv", row.names="X"))
colData <- read.csv("meta_file.csv", sep=",", row.names=1)
all(rownames(colData) %in% colnames(CountData))
CountData <- CountData[, rownames(colData)]
CountData <- as.matrix(read.csv("counts.csv", row.names="X"))
colData <- read.csv("meta_file.csv", sep=",", row.names=1)
all(rownames(colData) %in% colnames(CountData))
CountData <- CountData[, rownames(colData)]
all(rownames(colData) == colnames(CountData))
#Create a DESeqDataSet from count matrix and labels
dds <- DESeqDataSetFromMatrix(countData = CountData,
colData = colData, design = ~ type)
dds <- DESeq(dds)
res <- results(dds)
#Sort by adjusted p-value and display
(resOrdered <- res[order(res$padj), ])
head(results(dds, tidy=TRUE))
summary(res)
res <- res[order(res$padj),]
head(res)
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", xlim=c(-3,3)))
res_dataframe = as.data.frame(res)
res_dataframe$names <- rownames(res_dataframe)
res_dataframe$names <- gsub(pattern = "hsa-", replacement = "", x = res_dataframe$names)
library(EnhancedVolcano)
EnhancedVolcano(res,
lab = res_dataframe$names,
x = "log2FoldChange",
y = "pvalue",
pCutoff = 0.05,
FCcutoff = 1,
title = "Alzheimer's vs Normal")
EnhancedVolcano(res,
lab = res_dataframe$names,
x = "log2FoldChange",
y = "pvalue",
pCutoff = 0.05,
FCcutoff = 1,
title = "Vector expressing vs control vector")
final_set <- subset(res_dataframe, log2FoldChange < -1 & pvalue < 0.05 | log2FoldChange > 1 & pvalue < 0.05)
downreg <- subset(res_dataframe, log2FoldChange < -1 & pvalue < 0.05)
upreg <- subset(res_dataframe, log2FoldChange > 1 & pvalue < 0.05)
write.csv(final_set, "final_set_miRNAs.csv")
write.csv(downreg, "downregulated_miRNAs.csv")
write.csv(upreg, "upregulated_miRNAs.csv")
